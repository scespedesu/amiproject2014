//
// Generated file, do not edit! Created by opp_msgc 4.3 from Fragment.msg.
//

#ifndef _FRAGMENT_M_H_
#define _FRAGMENT_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0403
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif

// cplusplus {{
#include "IPv4Address.h"
// }}



/**
 * Class generated from <tt>Fragment.msg</tt> by opp_msgc.
 * <pre>
 * packet Fragment {
 *    
 *   
 *   
 *     IPv4Address srcAddr;
 *     IPv4Address destAddr;
 * 
 * 
 *    
 *     int originalPacketSize;
 *     int moreFragments;
 *     int gateIndex;
 *     int fragmentId;
 * 
 * }
 * </pre>
 */
class Fragment : public ::cPacket
{
  protected:
    IPv4Address srcAddr_var;
    IPv4Address destAddr_var;
    int originalPacketSize_var;
    int moreFragments_var;
    int gateIndex_var;
    int fragmentId_var;

  private:
    void copy(const Fragment& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Fragment&);

  public:
    Fragment(const char *name=NULL, int kind=0);
    Fragment(const Fragment& other);
    virtual ~Fragment();
    Fragment& operator=(const Fragment& other);
    virtual Fragment *dup() const {return new Fragment(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual IPv4Address& getSrcAddr();
    virtual const IPv4Address& getSrcAddr() const {return const_cast<Fragment*>(this)->getSrcAddr();}
    virtual void setSrcAddr(const IPv4Address& srcAddr);
    virtual IPv4Address& getDestAddr();
    virtual const IPv4Address& getDestAddr() const {return const_cast<Fragment*>(this)->getDestAddr();}
    virtual void setDestAddr(const IPv4Address& destAddr);
    virtual int getOriginalPacketSize() const;
    virtual void setOriginalPacketSize(int originalPacketSize);
    virtual int getMoreFragments() const;
    virtual void setMoreFragments(int moreFragments);
    virtual int getGateIndex() const;
    virtual void setGateIndex(int gateIndex);
    virtual int getFragmentId() const;
    virtual void setFragmentId(int fragmentId);
};

inline void doPacking(cCommBuffer *b, Fragment& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, Fragment& obj) {obj.parsimUnpack(b);}


#endif // _FRAGMENT_M_H_
